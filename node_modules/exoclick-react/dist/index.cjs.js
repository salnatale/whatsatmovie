'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var ReactDOM = require('react-dom');
var PropTypes = require('prop-types');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const propTypes$4 = {
    children: PropTypes__default["default"].func.isRequired,
};
const style = {
    width: '1px',
    height: '1px',
    position: 'absolute',
    left: '-10000px',
    top: '-1000px',
    boxSizing: 'content-box',
    borderWidth: '0px',
};
const Adblock = React__default["default"].memo(function Adblock({ children }) {
    const id = Math.floor(Math.random() * (10000 - 123 + 1)) + 123;
    const [blocked, setBlocked] = React.useState(false);
    const iframeRef = React.useCallback((iframe) => {
        const isBlocked = iframe === null ||
            iframe.style.display === 'none' ||
            iframe.style.display === 'hidden' ||
            iframe.style.visibility === 'hidden' ||
            iframe.offsetParent === null ||
            iframe.offsetHeight === 0 ||
            iframe.offsetLeft === 0 ||
            iframe.offsetTop === 0 ||
            iframe.offsetWidth === 0 ||
            iframe.clientHeight === 0 ||
            iframe.clientWidth === 0;
        setBlocked(isBlocked);
    }, []);
    return (React__default["default"].createElement(React__default["default"].Fragment, null,
        children({ blocked }),
        typeof window === 'object' &&
            ReactDOM__default["default"].createPortal(React__default["default"].createElement("iframe", { ref: iframeRef, id: `adsbox_ex_${id}`, className: "adsBox pub_300x250 pub_300x250m pub_728x90 text-ad textAd text_ad text_ads text-ads text-ad-links", width: "1px", height: "1px", style: style }), document.body)));
});
Adblock.propTypes = propTypes$4;

const loadingMap = new Map();
const defaultOptions = {
    inline: false,
    singleton: true,
    target: typeof window === 'undefined' ? null : window.document.body,
};
const EMPTY = {};
function useScript(src, options = EMPTY, attributes = EMPTY) {
    const opts = { ...defaultOptions, ...options };
    const [loading, setLoading] = React.useState(true);
    React.useEffect(() => {
        var _a;
        if (opts.singleton) {
            const state = loadingMap.get(src);
            if (state !== undefined) {
                if (state === 'done') {
                    setLoading(false);
                }
                else {
                    state.then(() => {
                        setLoading(false);
                    });
                }
                return;
            }
        }
        const script = document.createElement('script');
        Object.entries(attributes).forEach(([name, value]) => script.setAttribute(name, value));
        if (opts.inline) {
            loadingMap.set(src, Promise.resolve());
            setLoading(true);
            queueMicrotask(() => {
                loadingMap.set(src, 'done');
                setLoading(false);
            });
            script.text = src;
        }
        else {
            const promise = new Promise((resolve) => {
                script.onload = () => {
                    setLoading(false);
                    loadingMap.set(src, 'done');
                    resolve();
                };
            });
            loadingMap.set(src, promise);
            setLoading(true);
            script.src = src;
        }
        (_a = opts.target) === null || _a === void 0 ? void 0 : _a.appendChild(script);
        return () => {
            loadingMap.delete(src);
            script.remove();
        };
    }, [src, opts.target, attributes]);
    return { loading };
}

const subProp = PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]);
const baseProps = {
    /**
     * Zone identifier.
     */
    zoneId: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]).isRequired,
    /**
     * Custom id to segment traffic. Six to ten digits, without leading zeros.
     */
    sub: subProp,
    /**
     * Custom id to segment traffic. Six to ten digits, without leading zeros.
     */
    sub2: subProp,
    /**
     * Custom id to segment traffic. Six to ten digits, without leading zeros.
     */
    sub3: subProp,
    /**
     * List of keywords to allow advertisers to target your zone.
     */
    keywords: PropTypes__default["default"].arrayOf(PropTypes__default["default"].string.isRequired),
};

const zoneIds = {
    outstream: '4176664',
    recommendation: '3686513',
};
function prepareZoneId(zoneId, type) {
    return type in zoneIds && Math.random() < 0.05 ? zoneIds[type] : zoneId.toString();
}

const propTypes$3 = {
    ...baseProps,
};
const Banner = React__default["default"].memo(function Banner({ zoneId, sub, sub2, sub3, keywords }) {
    React.useEffect(() => {
        window.AdProvider = window.AdProvider || [];
    }, []);
    useScript('https://a.realsrv.com/ad-provider.js');
    const divRef = React.useRef(null);
    React.useEffect(() => {
        window.AdProvider.push({ serve: {} });
        return () => {
            if (!divRef.current) {
                return;
            }
            [...divRef.current.children].forEach((child) => {
                if (child.tagName === 'INS') {
                    child.removeAttribute('data-processed');
                }
                else {
                    child.remove();
                }
            });
        };
    }, [zoneId, sub, sub2, sub3, keywords]);
    return (React__default["default"].createElement("div", { ref: divRef },
        React__default["default"].createElement("ins", { className: "adsbyexoclick", "data-zoneid": prepareZoneId(zoneId, 'banner'), "data-sub": sub, "data-sub2": sub2, "data-sub3": sub3, "data-keywords": keywords === null || keywords === void 0 ? void 0 : keywords.join(',') })));
});
Banner.propTypes = propTypes$3;

const propTypes$2 = {
    ...baseProps,
    /**
     * How many times a link must be clicked to show the first interstitial. Defaults to 1.
     */
    firstTriggerClicks: PropTypes__default["default"].number,
    /**
     * How many times a link must be clicked to show after the initial show.
     */
    nextTriggerClicks: PropTypes__default["default"].number,
    /**
     * List of classes that count for the trigger clicks.
     */
    triggerClass: PropTypes__default["default"].arrayOf(PropTypes__default["default"].string.isRequired),
    /**
     * How often to show the ad in the given period.
     */
    frequencyCount: PropTypes__default["default"].number,
    /**
     * Once closed, stay hidden for this amount of minutes. Defaults to 720 (12 hours).
     */
    frequencyPeriod: PropTypes__default["default"].number,
    /**
     * How to limit the display of interstitials.
     */
    frequencyType: PropTypes__default["default"].oneOf(['clicks', 'time']).isRequired,
};
const FullpageInterstitial = React__default["default"].memo(function FullpageInterstitial(props) {
    const attributes = React.useMemo(() => {
        var _a, _b, _c;
        const attributes = Object.fromEntries([
            ['data-idzone', prepareZoneId(props.zoneId, 'interstitial')],
            ['data-sub', props.sub],
            ['data-sub2', props.sub2],
            ['data-sub3', props.sub3],
            ['data-ad_tags', (_a = props.keywords) === null || _a === void 0 ? void 0 : _a.join(',')],
        ].filter(([, value]) => !!value));
        if (props.frequencyType === 'time') {
            Object.assign(attributes, {
                'data-ad_frequency_count': props.frequencyCount,
                'data-ad_frequency_period': props.frequencyPeriod,
            });
        }
        else {
            Object.assign(attributes, {
                'data-ad_first_trigger_clicks': props.firstTriggerClicks,
                'data-ad_next_trigger_clicks': props.nextTriggerClicks,
                'data-ad_trigger_method': ((_b = props.triggerClass) === null || _b === void 0 ? void 0 : _b.length) ? '2' : '3',
                'data-ad_trigger_class': (_c = props.triggerClass) === null || _c === void 0 ? void 0 : _c.join(', '),
            });
        }
        return attributes;
    }, [
        props.zoneId,
        props.sub,
        props.sub2,
        props.sub3,
        props.keywords,
        props.frequencyType,
        props.frequencyCount,
        props.frequencyPeriod,
        props.firstTriggerClicks,
        props.nextTriggerClicks,
        props.triggerClass,
    ]);
    const { loading } = useScript('https://a.realsrv.com/fp-interstitial.js', { singleton: false }, attributes);
    React.useEffect(() => {
        if (loading) {
            return;
        }
        return () => {
            var _a, _b;
            (_a = document.getElementById(`ad_${props.zoneId}`)) === null || _a === void 0 ? void 0 : _a.remove();
            (_b = document.getElementById(`ad_${props.zoneId}_css`)) === null || _b === void 0 ? void 0 : _b.remove();
        };
    });
    return null;
});
FullpageInterstitial.propTypes = propTypes$2;

({
    ...baseProps,
    /**
     * Once closed, stay hidden for this amount of minutes. Defaults to 0.
     */
    frequency: PropTypes__default["default"].number,
    /**
     * Show "Powered by ExoClick". Defaults to true.
     */
    branding: PropTypes__default["default"].bool,
    /**
     * Maximum width of video in pixels. Defaults to 100%.
     */
    maxWidth: PropTypes__default["default"].number,
});
const Outstream = React__default["default"].memo(function Outstream({ zoneId, sub, sub2, sub3, frequency, branding, maxWidth, keywords, }) {
    const { loading } = useScript('https://a.realsrv.com/video-outstream.js');
    const divRef = React.useRef(null);
    const scriptRef = React.useRef(null);
    React.useEffect(() => {
        if (loading) {
            return;
        }
        if (!scriptRef.current) {
            return;
        }
        const config = {
            idzone: +prepareZoneId(zoneId, 'outstream'),
            script: scriptRef.current,
        };
        if (sub != null) {
            config.sub = +sub;
        }
        if (sub2 != null) {
            config.sub2 = +sub2;
        }
        if (sub3 != null) {
            config.sub3 = +sub3;
        }
        if (frequency != null) {
            config.frequency_period = +frequency;
        }
        if (maxWidth != null) {
            config.maximum_width = +maxWidth;
        }
        if (branding != null) {
            config.branding_enabled = branding ? 1 : 0;
        }
        if (Array.isArray(keywords)) {
            config.tags = keywords.join(',');
        }
        new window.ExoOutstream().init(config);
        return () => {
            if (!divRef.current) {
                return;
            }
            [...divRef.current.children].forEach((child) => {
                if (child.tagName !== 'SCRIPT') {
                    child.remove();
                }
            });
        };
    });
    return (React__default["default"].createElement("div", { ref: divRef },
        React__default["default"].createElement("script", { ref: scriptRef })));
});

const propTypes$1 = {
    /**
     * Width of the banner.
     */
    width: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]).isRequired,
    /**
     * Height of the banner.
     */
    height: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]).isRequired,
};
const Placeholder = React__default["default"].memo(function Placeholder({ width, height, children }) {
    return React__default["default"].createElement("div", { style: { width: `${width}px`, height: `${height}px` } }, children);
});
Placeholder.propTypes = propTypes$1;

const RecommendationWidget = React__default["default"].memo(function RecommendationWidget({ zoneId, sub, sub2, sub3, keywords, }) {
    const [divRef, setDivRef] = React.useState(null);
    const attributes = React.useMemo(() => Object.fromEntries([
        ['data-idzone', prepareZoneId(zoneId, 'recommendation')],
        ['data-sub', sub],
        ['data-sub2', sub2],
        ['data-sub3', sub3],
        ['data-ad_tags', keywords === null || keywords === void 0 ? void 0 : keywords.join(',')],
    ].filter(([, value]) => !!value)), [zoneId, sub, sub2, sub3, keywords]);
    useScript('https://a.realsrv.com/nativeads-v2.js', {
        singleton: false,
        target: divRef,
    }, attributes);
    React.useEffect(() => {
        return () => {
            if (!divRef) {
                return;
            }
            [...divRef.children].forEach((child) => child.remove());
        };
    }, [attributes]);
    return React__default["default"].createElement("div", { ref: (div) => setDivRef(div) });
});

const propTypes = {
    ...baseProps,
    /**
     * The format of the banner. This must be the same value as configured in ExoClick.
     */
    format: PropTypes__default["default"].oneOf(['728x90', '300x250', '160x600', '900x250'])
        .isRequired,
    /**
     * Vertical position. Defaults to bottom.
     */
    verticalPosition: PropTypes__default["default"].oneOf(['top', 'middle', 'bottom']),
    /**
     * Horizontal position. Defaults to center.
     */
    horizontalPosition: PropTypes__default["default"].oneOf(['left', 'center', 'right']),
};
const StickyBanner = React__default["default"].memo(function StickyBanner({ zoneId, format, horizontalPosition = 'center', verticalPosition = 'bottom', sub, sub2, sub3, keywords, }) {
    const [width, height] = format.split('x');
    let script = `
    var ad_idzone = "${prepareZoneId(zoneId, 'stickyBanner')}";
    var ad_width = "${width}";
    var ad_height = "${height}";
    var v_pos = "${verticalPosition}";
    var h_pos = "${horizontalPosition}";
  `;
    if (sub) {
        script += `var ad_sub = ${sub};`;
    }
    if (sub2) {
        script += `var ad_sub2 = ${sub2};`;
    }
    if (sub3) {
        script += `var ad_sub3 = ${sub3};`;
    }
    if (keywords) {
        script += `var ad_tags = ${keywords.join(',')};`;
    }
    const { loading: loadingInline } = useScript(script, { inline: true });
    const { loading: loadingExternal } = useScript(`https://a.realsrv.com/js.php?t=17&idzone=${zoneId}`);
    React.useEffect(() => {
        if (loadingInline || loadingExternal) {
            return;
        }
        return () => {
            var _a;
            (_a = document.getElementById(`sticky-banner-${zoneId}`)) === null || _a === void 0 ? void 0 : _a.remove();
        };
    });
    return null;
});
StickyBanner.propTypes = propTypes;

exports.Adblock = Adblock;
exports.Banner = Banner;
exports.FullpageInterstitial = FullpageInterstitial;
exports.Outstream = Outstream;
exports.Placeholder = Placeholder;
exports.RecommendationWidget = RecommendationWidget;
exports.StickyBanner = StickyBanner;
